# -*- coding: utf-8 -*-
"""middleslice(all-test).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wo7pHpphf33BFOAPAlkqE955nDmnEifv
"""

!pip install nibabel SimpleITK pyradiomics

import SimpleITK as sitk
import numpy as np
import matplotlib.pyplot as plt
from radiomics import featureextractor
import nibabel as nib
import six

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt

# Path to the test data and the output folder
data = '/content/drive/My Drive/test/'
output_folder = '/content/drive/My Drive/middleslice-all_test/'

# Create the output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# Get list of patient directories
patient_dirs = [f for f in os.listdir(data) if os.path.isdir(os.path.join(data, f))]

# Loop through each patient directory
for patient_dir in patient_dirs:
    # Construct the file paths
    T2W_file = os.path.join(data, patient_dir, f'{patient_dir}_t2w.nii.gz')
    CM_file = os.path.join(data, patient_dir, f'{patient_dir}_tumor.nii.gz')
    ADC_file = os.path.join(data, patient_dir, f'{patient_dir}_adc.nii.gz')

    # Load the image data
    T2W_s1 = nib.load(T2W_file).get_fdata()
    CM_s1 = nib.load(CM_file).get_fdata()
    ADC_s1 = nib.load(ADC_file).get_fdata()

    # Standardize T2W and ADC images using Z-score normalization
    T2W_s1_standardized = (T2W_s1 - np.mean(T2W_s1)) / (np.std(T2W_s1) + 1e-8)
    ADC_s1_standardized = (ADC_s1 - np.mean(ADC_s1)) / (np.std(ADC_s1) + 1e-8)

    # Get the middle slice index for both volumes
    middle_slice_index_T2W = T2W_s1.shape[2] // 2
    middle_slice_index_ADC = ADC_s1.shape[2] // 2

    # Get the middle slices
    T2W_slice_t = T2W_s1[:, :, middle_slice_index_T2W].astype(np.float32)
    T2W_slice_s = T2W_s1_standardized[:, :, middle_slice_index_T2W].astype(np.float32)

    ADC_slice_t = ADC_s1[:, :, middle_slice_index_ADC].astype(np.float32)
    ADC_slice_s = ADC_s1_standardized[:, :, middle_slice_index_ADC].astype(np.float32)

    # Rotate the slices for better visualization
    T2W_slice_t_rotated = np.rot90(T2W_slice_t)
    T2W_slice_s_rotated = np.rot90(T2W_slice_s)
    ADC_slice_t_rotated = np.rot90(ADC_slice_t)
    ADC_slice_s_rotated = np.rot90(ADC_slice_s)

    # Create a 2x2 grid for the images
    fig, axes = plt.subplots(2, 2, figsize=(20, 20))

    # T2W original slice
    axes[0, 0].imshow(T2W_slice_t_rotated, cmap='gray', origin='lower')
    axes[0, 0].set_title(f'T2W from {patient_dir} (Middle Slice)')
    axes[0, 0].axis('off')

    # T2W standardized slice
    axes[0, 1].imshow(T2W_slice_s_rotated, cmap='gray', origin='lower')
    axes[0, 1].set_title(f'Standardized T2W from {patient_dir} (Middle Slice)')
    axes[0, 1].axis('off')

    # ADC original slice
    axes[1, 0].imshow(ADC_slice_t_rotated, cmap='gray', origin='lower')
    axes[1, 0].set_title(f'ADC from {patient_dir} (Middle Slice)')
    axes[1, 0].axis('off')

    # ADC standardized slice
    axes[1, 1].imshow(ADC_slice_s_rotated, cmap='gray', origin='lower')
    axes[1, 1].set_title(f'Standardized ADC from {patient_dir} (Middle Slice)')
    axes[1, 1].axis('off')

    # Save the figure as a PNG file
    output_file = os.path.join(output_folder, f'{patient_dir}_middleslices.png')
    plt.tight_layout()
    plt.savefig(output_file)
    plt.close(fig)  # Close the plot to free up memory

print("All middle slice images have been saved to the folder:", output_folder)